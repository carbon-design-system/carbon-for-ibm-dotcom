/**
 * @license
 *
 * Copyright IBM Corp. 2020, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

import { html, property } from 'lit-element';
import ifNonEmpty from '../../internal/vendor/@carbon/web-components/globals/directives/if-non-empty.js';
import CDSLink from '../../internal/vendor/@carbon/web-components/components/link/link.js';
import Launch16 from '../../internal/vendor/@carbon/web-components/icons/launch/16.js';
import settings from '../../internal/vendor/@carbon/ibmdotcom-utilities/utilities/settings/settings';
import C4DMegaMenu from './megamenu';
import { MEGAMENU_LAYOUT_SCHEME } from './defs';
import styles from './masthead.scss';
import { carbonElement as customElement } from '../../internal/vendor/@carbon/web-components/globals/decorators/carbon-element.js';

const { stablePrefix: c4dPrefix } = settings;

/**
 * MegaMenu category sublink
 *
 * @element c4d-megamenu-category-link
 */
@customElement(`${c4dPrefix}-megamenu-category-link`)
class C4DMegaMenuCategoryLink extends CDSLink {
  @property({ reflect: true })
  layout?: MEGAMENU_LAYOUT_SCHEME;

  /**
   * link title.
   */
  @property({ reflect: true })
  title = '';

  /**
   * Maps target value to icons.
   */
  protected _targetMap = new Map([['external', Launch16()]]);

  /**
   * Renders an icon based on target value.
   */
  protected _renderIcon() {
    const { target, _targetMap } = this;
    return _targetMap.has(target) ? _targetMap.get(target) : undefined;
  }

  /**
   * @returns The inner content.
   */
  protected _renderInner() {
    const { title } = this;
    return html`
      ${title
        ? html`
            <div part="link-heading">
              <span>${title}${this._renderIcon()}</span>
              <slot name="icon" @slotchange="${this._handleSlotChange}"></slot>
            </div>
          `
        : ''}
      <span part="link-description">
        <slot></slot>
      </span>
    `;
  }

  protected _renderLink() {
    const {
      download,
      href,
      hreflang,
      linkRole,
      ping,
      rel,
      target,
      title,
      type,
      _classes: classes,
      _handleClick: handleClick,
    } = this;
    return html`
      <a
        id="link"
        class="${classes}"
        part="link"
        role="${ifNonEmpty(linkRole)}"
        download="${ifNonEmpty(download)}"
        href="${ifNonEmpty(href)}"
        hreflang="${ifNonEmpty(hreflang)}"
        ping="${ifNonEmpty(ping)}"
        rel="${ifNonEmpty(rel)}"
        target="${ifNonEmpty(target)}"
        type="${ifNonEmpty(type)}"
        @click="${ifNonEmpty(handleClick)}"
        data-attribute1="headerNav"
        data-attribute2="FlatItem"
        data-attribute3="${title}">
        ${this._renderInner()}
      </a>
    `;
  }

  connectedCallback(): void {
    const megamenu = this.closest(
      `[data-autoid="${C4DMegaMenu.stableSelector}"`
    );
    this.layout = megamenu?.getAttribute('layout') as MEGAMENU_LAYOUT_SCHEME;

    super.connectedCallback();
  }

  static styles = styles; // `styles` here is a `CSSResult` generated by custom WebPack loader
}

export default C4DMegaMenuCategoryLink;
