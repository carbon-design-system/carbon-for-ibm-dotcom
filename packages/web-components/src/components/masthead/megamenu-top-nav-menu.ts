/**
 * @license
 *
 * Copyright IBM Corp. 2020, 2021
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

import { customElement } from 'lit-element';
import settings from 'carbon-components/es/globals/js/settings';
import ddsSettings from '@carbon/ibmdotcom-utilities/es/utilities/settings/settings.js';
import { forEach } from '../../globals/internal/collection-helpers';
import DDSTopNavMenu from './top-nav-menu';
import DDSMegaMenuOverlay from './megamenu-overlay';
import styles from './masthead.scss';

const { prefix } = settings;
const { stablePrefix: ddsPrefix } = ddsSettings;

/**
 * Megamenu top nav menu.
 *
 * @element dds-megamenu-top-nav-menu
 */
@customElement(`${ddsPrefix}-megamenu-top-nav-menu`)
class DDSMegaMenuTopNavMenu extends DDSTopNavMenu {
  /**
   * The observer for the resize of the viewport.
   */
  private _observerResizeRoot: any | null = null; // TODO: Wait for `.d.ts` update to support `ResizeObserver`

  /**
   * Cleans-up and creats the resize observer for the scrolling container.
   *
   * @param [options] The options.
   * @param [options.create] `true` to create the new resize observer.
   */
  private _cleanAndCreateObserverResize({ create }: { create?: boolean } = {}) {
    if (this._observerResizeRoot) {
      this._observerResizeRoot.disconnect();
      this._observerResizeRoot = null;
    }
    if (create) {
      // TODO: Wait for `.d.ts` update to support `ResizeObserver`
      // @ts-ignore
      this._observerResizeRoot = new ResizeObserver(this._observeResizeRoot);
      this._observerResizeRoot.observe(this.ownerDocument!.documentElement);
    }
  }

  /**
   * The observer for the resize of the viewport.
   */
  private _observeResizeRoot = records => {
    const { contentRect } = records[records.length - 1];
    // A workaround for Safari bug where `100vw` in Shadow DOM causes delayed rendering
    // https://github.com/carbon-design-system/carbon-for-ibm-dotcom/issues/4493
    const { customPropertyViewportWidth } = this.constructor as typeof DDSMegaMenuTopNavMenu;
    this.style.setProperty(customPropertyViewportWidth, `${contentRect.width}px`);
  };

  connectedCallback() {
    super.connectedCallback();
    this._cleanAndCreateObserverResize({ create: true });
  }

  disconnectedCallback() {
    this._cleanAndCreateObserverResize();
    super.disconnectedCallback();
  }

  firstUpdated() {
    this._cleanAndCreateObserverResize({ create: true });
  }

  updated(changedProperties) {
    super.updated(changedProperties);
    if (changedProperties.has('expanded')) {
      const doc = this.getRootNode() as Document;
      forEach(doc.querySelectorAll((this.constructor as typeof DDSMegaMenuTopNavMenu).selectorOverlay), item => {
        (item as DDSMegaMenuOverlay).active = this.expanded;
      });

      if (this.expanded) {
        doc?.body?.classList.add(`${prefix}--body__lock-scroll`);
      } else {
        doc?.body?.classList.remove(`${prefix}--body__lock-scroll`);
      }
    }
  }

  /**
   * The CSS custom property name for the live viewport width.
   */
  static get customPropertyViewportWidth() {
    return `--${ddsPrefix}-ce--viewport-width`;
  }

  /**
   * A selector that will return the overlays.
   */
  static get selectorOverlay() {
    return `${ddsPrefix}-megamenu-overlay`;
  }

  static styles = styles; // `styles` here is a `CSSResult` generated by custom WebPack loader
}

export default DDSMegaMenuTopNavMenu;
