/**
 * @license
 *
 * Copyright IBM Corp. 2020
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

import { html, property, query, customElement } from 'lit-element';
import settings from 'carbon-components/es/globals/js/settings';
import ddsSettings from '@carbon/ibmdotcom-utilities/es/utilities/settings/settings';
import HostListener from 'carbon-custom-elements/es/globals/decorators/host-listener';
import HostListenerMixin from 'carbon-custom-elements/es/globals/mixins/host-listener';
import BXHeaderMenuButton from 'carbon-custom-elements/es/components/ui-shell/header-menu-button';
import styles from './masthead.scss';

const { prefix } = settings;
const { stablePrefix: ddsPrefix } = ddsSettings;

// eslint-disable-next-line no-bitwise
const PRECEDING = Node.DOCUMENT_POSITION_PRECEDING | Node.DOCUMENT_POSITION_CONTAINS;
// eslint-disable-next-line no-bitwise
const FOLLOWING = Node.DOCUMENT_POSITION_FOLLOWING | Node.DOCUMENT_POSITION_CONTAINED_BY;

/**
 * Toggle button for masthead left nav.
 *
 * @element dds-masthead-menu-button
 */
@customElement(`${ddsPrefix}-masthead-menu-button`)
class DDSMastheadMenuButton extends HostListenerMixin(BXHeaderMenuButton) {
  /**
   * Node to track focus going outside of modal content.
   */
  @query('#start-sentinel')
  private _startSentinelNode!: HTMLAnchorElement;

  /**
   * Node to track focus going outside of modal content.
   */
  @query('#end-sentinel')
  private _endSentinelNode!: HTMLAnchorElement;

  /**
   * The `<button>`.
   */
  @query(`.${prefix}--header__menu-trigger`)
  private _buttonNode!: HTMLButtonElement;

  /**
   * Handles `blur` event on this element.
   *
   * @param event The event.
   */
  @HostListener('shadowRoot:focusout')
  // @ts-ignore: The decorator refers to this method but TS thinks this method is not referred to
  private _handleBlur = (event: FocusEvent) => {
    const { target, relatedTarget } = event;
    const { active, _startSentinelNode: startSentinelNode, _endSentinelNode: endSentinelNode } = this;
    const oldContains =
      target !== this && this.shadowRoot!.contains(target as Node) && target !== startSentinelNode && target !== endSentinelNode;
    const currentContains =
      relatedTarget !== this &&
      this.shadowRoot!.contains(relatedTarget as Node) &&
      relatedTarget !== startSentinelNode &&
      relatedTarget !== endSentinelNode;

    // Requests for focus wrapping if _all_ of the following is met:
    // * The left nav is open
    // * The viewport still has focus
    // * This menu button used to have focus but no longer has focus
    if (active && relatedTarget && oldContains && !currentContains) {
      let comparisonResult = (target as Node).compareDocumentPosition(relatedTarget as Node);
      if (relatedTarget === startSentinelNode) {
        comparisonResult = Node.DOCUMENT_POSITION_PRECEDING;
      }
      if (relatedTarget === endSentinelNode) {
        comparisonResult = Node.DOCUMENT_POSITION_FOLLOWING;
      }
      // eslint-disable-next-line no-bitwise
      if (comparisonResult & PRECEDING || comparisonResult & FOLLOWING) {
        const { eventRequestFocusWrap } = this.constructor as typeof DDSMastheadMenuButton;
        this.dispatchEvent(
          new CustomEvent(eventRequestFocusWrap, {
            bubbles: true,
            cancelable: false,
            composed: true,
            detail: {
              comparisonResult,
            },
          })
        );
      }
    }
  };

  /**
   * The shadow slot this toggle button should be in.
   */
  @property({ reflect: true })
  slot = 'brand';

  focus() {
    const { _buttonNode: buttonNode } = this;
    if (buttonNode) {
      buttonNode.focus();
    }
  }

  render() {
    return html`
      <a id="start-sentinel" class="${prefix}--visually-hidden" href="javascript:void 0" role="navigation"></a>
      ${super.render()}
      <a id="end-sentinel" class="${prefix}--visually-hidden" href="javascript:void 0" role="navigation"></a>
    `;
  }

  /**
   * The name of the custom event fired when this masthead menu requests for focus wrapping.
   */
  static get eventRequestFocusWrap() {
    return `${ddsPrefix}-masthead-menu-button-request-focus-wrap`;
  }

  static styles = styles; // `styles` here is a `CSSResult` generated by custom WebPack loader
}

export default DDSMastheadMenuButton;
