/**
 * @license
 *
 * Copyright IBM Corp. 2020, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

import { html, property, LitElement } from 'lit-element';
import { classMap } from 'lit-html/directives/class-map.js';
import settings from '../../internal/vendor/@carbon/ibmdotcom-utilities/utilities/settings/settings';
import StableSelectorMixin from '../../globals/mixins/stable-selector';
import { MEGAMENU_RIGHT_NAVIGATION_STYLE_SCHEME } from './defs';
import styles from './masthead.scss';
import './megamenu-link-with-icon';
import { carbonElement as customElement } from '../../internal/vendor/@carbon/web-components/globals/decorators/carbon-element.js';

export { MEGAMENU_RIGHT_NAVIGATION_STYLE_SCHEME };

const { prefix, stablePrefix: c4dPrefix } = settings;

/**
 * MegaMenu right navigation section
 *
 * @element c4d-megamenu-right-navigation
 */
@customElement(`${c4dPrefix}-megamenu-right-navigation`)
class C4DMegaMenuRightNavigation extends StableSelectorMixin(LitElement) {
  /**
   * `true` to render left (highlighted) section layout.
   */
  @property({ reflect: true, attribute: 'style-scheme' })
  styleScheme = MEGAMENU_RIGHT_NAVIGATION_STYLE_SCHEME.FULL;

  @property({ attribute: 'data-child-count', reflect: true })
  childCount: Number | undefined;

  /**
   * Returns a class-name(s) for megamenu container
   */
  protected _getClassNames() {
    return classMap({
      [`${prefix}--masthead__megamenu-container`]: true,
      [`${prefix}--masthead__megamenu-container--has-sidebar`]:
        this.styleScheme === MEGAMENU_RIGHT_NAVIGATION_STYLE_SCHEME.HAS_SIDEBAR,
    });
  }

  /**
   * Handles default slot content changes.
   *
   * @param event Event
   */
  protected _handleSlotChange(event: Event) {
    const { onlyChildClassName } = this
      .constructor as typeof C4DMegaMenuRightNavigation;
    const children = (event.target as HTMLSlotElement).assignedElements();
    this.childCount = children.length;

    // Supports alternative layout for single items.
    if (children.length === 1 && onlyChildClassName) {
      children[0].classList.add(onlyChildClassName);
    } else if (children[0].classList.contains(onlyChildClassName)) {
      children[0].classList.remove(onlyChildClassName);
    }
  }

  updated() {
    const hasViewAll =
      (
        this.shadowRoot?.querySelector(
          'slot[name="view-all"]'
        ) as HTMLSlotElement
      ).assignedElements().length > 0;
    this.shadowRoot
      ?.querySelector(`.${prefix}--masthead__megamenu-container`)
      ?.classList.toggle(
        `${prefix}--masthead__megamenu-container--has-view-all-link`,
        hasViewAll
      );
  }

  render() {
    return html`
      <div class="${this._getClassNames()}">
        <div class="${prefix}--masthead__megamenu-container-inner">
          <div class="${prefix}--masthead__megamenu__heading">
            <slot name="heading"></slot>
          </div>
          <div class="${prefix}--masthead__megamenu__categories">
            <slot @slotchange="${this._handleSlotChange}"></slot>
          </div>
        </div>
        <div class="${prefix}--masthead__megamenu__view-all">
          <span class="${prefix}--masthead__megamenu__view-all__border"></span>
          <slot name="view-all"></slot>
        </div>
      </div>
    `;
  }

  static get onlyChildClassName() {
    return 'only-child';
  }

  static get stableSelector() {
    return `${c4dPrefix}--masthead__megamenu-right-navigation`;
  }

  static styles = styles; // `styles` here is a `CSSResult` generated by custom WebPack loader
}

export default C4DMegaMenuRightNavigation;
