/**
 * @license
 *
 * Copyright IBM Corp. 2020
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

import { html, internalProperty, property, customElement, LitElement } from 'lit-element';
import { breakpoints } from '@carbon/layout/es/index.js';
import HostListener from 'carbon-web-components/es/globals/decorators/host-listener.js';
import HostListenerMixin from 'carbon-web-components/es/globals/mixins/host-listener.js';
import on from 'carbon-components/es/globals/js/misc/on';
import ddsSettings from '@carbon/ibmdotcom-utilities/es/utilities/settings/settings.js';
import FocusMixin from 'carbon-web-components/es/globals/mixins/focus.js';
import Handle from '../../globals/internal/handle';
import styles from './masthead.scss';

const { stablePrefix: ddsPrefix } = ddsSettings;

/**
 * The action bar in masthead.
 *
 * @element dds-masthead-global-bar
 */
@customElement(`${ddsPrefix}-masthead-global-bar`)
class DDSMastheadGlobalBar extends FocusMixin(HostListenerMixin(LitElement)) {
  /**
   * Media query listener handler.
   */
  private _mqHandler: Handle | null = null;

  /**
   * The shadow slot this action bar should be in.
   */
  @property({ reflect: true })
  slot = 'profile';

  /**
   * Search bar opened flag.
   */
  @internalProperty()
  private _openedSearch = false;

  /**
   * Medium breakpoint flag.
   */
  @internalProperty()
  private _responsiveMd = false;

  /**
   * Handles toggle event from the search component.
   *
   * @param event The event.
   */
  @HostListener('parentRoot:eventToggleSearch')
  // @ts-ignore: The decorator refers to this method but TS thinks this method is not referred to
  private _handleSearchToggle = (event: Event) => {
    this._openedSearch = (event as CustomEvent).detail.active;
  };

  /**
   * Handles media query event.
   *
   * @param event The event.
   */
  private _handleMediaQuery(event: Event) {
    this._responsiveMd = (event as MediaQueryListEvent).matches;
  }

  connectedCallback() {
    super.connectedCallback();

    const _mqMedium = this.ownerDocument?.defaultView?.matchMedia(`(max-width: ${breakpoints.md.width})`);
    this._responsiveMd = _mqMedium ? _mqMedium.matches : false;

    this._mqHandler = on(_mqMedium, 'change', this._handleMediaQuery.bind(this));
  }

  disconnectedCallback() {
    if (this._mqHandler) {
      this._mqHandler = this._mqHandler.release();
    }

    super.disconnectedCallback();
  }

  render() {
    return this._openedSearch && this._responsiveMd
      ? html``
      : html`
          <slot></slot>
        `;
  }

  /**
   * The name of the custom event fired after the seach is toggled.
   */
  static get eventToggleSearch() {
    return `${ddsPrefix}-masthead-search-toggled`;
  }

  static styles = styles; // `styles` here is a `CSSResult` generated by custom WebPack loader
}

export default DDSMastheadGlobalBar;
