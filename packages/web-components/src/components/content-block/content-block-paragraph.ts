/**
 * @license
 *
 * Copyright IBM Corp. 2020, 2025
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

import { LitElement, html } from 'lit';
import settings from '@carbon/ibmdotcom-utilities/es/utilities/settings/settings.js';
import styles from './content-block.scss';
import StableSelectorMixin from '../../globals/mixins/stable-selector';
import { carbonElement as customElement } from '@carbon/web-components/es/globals/decorators/carbon-element.js';

const { stablePrefix: c4dPrefix } = settings;

/**
 * The paragraph content in content block.
 *
 * @element c4d-content-block-paragraph
 */
@customElement(`${c4dPrefix}-content-block-paragraph`)
class C4DContentBlockParagraph extends StableSelectorMixin(LitElement) {
  firstUpdated() {
    if (!this.shadowRoot) {
      return;
    }

    const slot = this.shadowRoot.querySelector('slot');
    if (slot) {
      slot.addEventListener('slotchange', () => {
        this.toggleVisibility();
      });
    }

    this.toggleVisibility();
  }

  toggleVisibility() {
    if (!this.shadowRoot) {
      return;
    }

    const slot = this.shadowRoot.querySelector('slot');
    if (!slot) {
      return;
    }

    const assignedNodes = slot.assignedNodes({ flatten: true });

    const hasTextContent = (node) => {
      if (node.nodeType === Node.TEXT_NODE) {
        return !!node.textContent?.trim();
      }
      if (node.nodeType === Node.ELEMENT_NODE) {
        return [...node.childNodes].some(hasTextContent);
      }
      return false;
    };

    const isEmpty = !assignedNodes.some(hasTextContent);

    this.style.display = isEmpty ? 'none' : 'block';
  }

  render() {
    return html` <slot></slot> `;
  }

  static get stableSelector() {
    return `${c4dPrefix}--content-block-paragraph`;
  }

  static styles = styles; // `styles` here is a `CSSResult` generated by custom WebPack loader
}

export default C4DContentBlockParagraph;
