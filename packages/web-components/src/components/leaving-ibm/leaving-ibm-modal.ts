/**
 * @license
 *
 * Copyright IBM Corp. 2020
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

import { customElement } from 'lit-element';
import BXModal from 'carbon-web-components/es/components/modal/modal.js';
import ddsSettings from '@carbon/ibmdotcom-utilities/es/utilities/settings/settings.js';
import HostListener from 'carbon-web-components/es/globals/decorators/host-listener.js';
import StableSelectorMixin from '../../globals/mixins/stable-selector';
import styles from './leaving-ibm.scss';

const { stablePrefix: ddsPrefix } = ddsSettings;

/**
 * Leaving IBM Modal.
 *
 * @element dds-leaving-ibm-modal
 */
@customElement(`${ddsPrefix}-leaving-ibm-modal`)
class DDSLeavingIbmModal extends StableSelectorMixin(BXModal) {
  /**
   * The unique ID for ID ref.
   */
  private _uniqueId = `__${ddsPrefix}-leaving-ibm-modal__${Math.random()
    .toString(36)
    .slice(2)}`;

  /**
   * Handles `slotchange` event.
   *
   * @param event The event.
   */
  @HostListener('shadowRoot:slotchange')
  // @ts-ignore: The decorator refers to this method but TS thinks this method is not referred to
  private _handleSlotChange = (event: Event) => {
    const { selectorHeading } = this.constructor as typeof DDSLeavingIbmModal;
    if (!this.hasAttribute('aria-labelledby')) {
      const headingNode = (event.target as HTMLSlotElement).assignedNodes().reduce((acc, node) => {
        if ((node as Element).matches?.(selectorHeading)) {
          acc.push(node);
        } else {
          acc.push(...((node as Element).querySelectorAll?.(selectorHeading) ?? []));
        }
        return acc;
      }, [] as Node[])[0] as Element | void;
      if (headingNode) {
        if (!headingNode.id) {
          const { id, _uniqueId: uniqueId } = this;
          headingNode.id = id || uniqueId;
        }
        if (headingNode.id) {
          this.setAttribute('aria-labelledby', headingNode.id);
        }
      }
    }
  };

  connectedCallback() {
    if (!this.hasAttribute('role')) {
      this.setAttribute('role', 'dialog');
    }
    super.connectedCallback();
  }

  /**
   * A selector selecting the heading.
   */
  static get selectorHeading() {
    return `${ddsPrefix}-leaving-ibm-modal-heading`;
  }

  static styles = styles; // `styles` here is a `CSSResult` generated by custom WebPack loader

  static get stableSelector() {
    return `${ddsPrefix}--leaving-ibm-modal`;
  }
}

export default DDSLeavingIbmModal;
