/**
 * @license
 *
 * Copyright IBM Corp. 2020, 2024
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

import { LitElement, html } from 'lit';
import { state } from 'lit/decorators.js';
import settings from '@carbon/ibmdotcom-utilities/es/utilities/settings/settings.js';
import StableSelectorMixin from '../../globals/mixins/stable-selector';
import styles from './footer.scss';
import { carbonElement as customElement } from '@carbon/web-components/es/globals/decorators/carbon-element.js';

const { prefix, stablePrefix: c4dPrefix } = settings;

/**
 * Legal nav item, working as a placeholder for cookie perference link.
 *
 * @element c4d-legal-nav-cookie-preferences-placeholder
 * @csspart legal-nav-cookie-preferences - The legal nav cookie preferences container. Usage: `c4d-legal-nav-cookie-preferences-placeholder::part(legal-nav-cookie-preferences)`
 */
@customElement(`${c4dPrefix}-legal-nav-cookie-preferences-placeholder`)
class C4DLegalNavCookiePreferencesPlaceholder extends StableSelectorMixin(
  LitElement
) {
  /**
   * `true` if there is cookie content.
   */
  @state()
  protected _hasCookies = false;

  /**
   * Handles `slotchange` event.
   */
  private _handleSlotChange(event: Event) {
    // Finds new injected links
    const linkNodes = (event.target as HTMLSlotElement)
      .assignedNodes()
      .filter((node) => (node as Element).tagName === 'A') as HTMLLinkElement[];
    linkNodes.forEach((node) => {
      // Adds Carbon CSS classes
      node.classList.add(`${prefix}--link`);
      node.classList.add(`${prefix}--footer__link`);
      // Moves new injected links to shadow DOM
      this.shadowRoot!.appendChild(node);
    });
  }

  render() {
    const { _handleSlotChange: handleSlotchange, _hasCookies: hasCookies } =
      this;
    return html`
      <div part="legal-nav-cookie-preferences" ?hidden="${!hasCookies}">
        <slot @slotchange="${handleSlotchange}"></slot>
      </div>
    `;
  }

  static get stableSelector() {
    return `${c4dPrefix}--privacy-cp`;
  }

  static styles = styles; // `styles` here is a `CSSResult` generated by custom WebPack loader
}

export default C4DLegalNavCookiePreferencesPlaceholder;
