/**
 * @license
 *
 * Copyright IBM Corp. 2019, 2022
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

import ifNonNull from 'carbon-web-components/es/globals/directives/if-non-null.js';
import { html, property, customElement, LitElement } from 'lit-element';
import ArrowRight20 from 'carbon-web-components/es/icons/arrow--right/20.js';
import settings from 'carbon-components/es/globals/js/settings';
import ddsSettings from '../../internal/vendor/@carbon/ibmdotcom-utilities/utilities/settings/settings';
import StableSelectorMixin from '../../globals/mixins/stable-selector';
import styles from './universal-banner.scss';

const { stablePrefix: ddsPrefix } = ddsSettings;
const { prefix } = settings;

/**
 * Universal banner
 *
 * @element dds-universal-banner
 */
@customElement(`${ddsPrefix}-universal-banner`)
class DDSUniversalBanner extends StableSelectorMixin(LitElement) {
  /**
   * Saves the button CTA's copy to use in link-with-icon for the small breakpoint
   */
  @property()
  buttonCopy;

  /**
   * Saves the button CTA's href to use in link-with-icon for the small breakpoint
   */
  @property()
  buttonHref;

  /**
   * `true` if there is an image.
   */
  @property({ attribute: 'has-image', reflect: true, type: Boolean })
  hasImage = false;

  /**
   * Grid media options to display image.
   * Available options are either '4-col' or '8-col'.
   */
  @property({ attribute: 'image-width', reflect: true, type: String })
  imageWidth;

  /**
   * Handles `slotchange` event on the cta `<slot>`.
   */
  protected _handleImageSlotChange({ target }: Event) {
    this.hasImage = (target as HTMLSlotElement)
      .assignedNodes()
      .some(node => node.nodeType !== Node.TEXT_NODE || node!.textContent!.trim());

    if (this.hasImage && !this.imageWidth) {
      this.imageWidth = '4-col';
    }
  }

  /**
   * Handles `slotchange` event on the cta `<slot>`.
   */
  protected _handleButtonSlotChange({ target }: Event) {
    const hasContent = (target as HTMLSlotElement)
      .assignedNodes()
      .filter(elem => (elem as HTMLElement).matches?.((this.constructor as typeof DDSUniversalBanner).ctaButton));

    this.buttonHref = (hasContent[0] as HTMLElement)?.getAttribute('href');
    this.buttonCopy = hasContent[0]?.textContent?.trim();
  }

  render() {
    return html`
      <div class="${prefix}--universal-banner-layout-container">
        <div ?hidden="${!this.hasImage}" class="${prefix}--universal-banner-image-container">
          <slot name="image" @slotchange="${this._handleImageSlotChange}"></slot>
        </div>

        <div class="${prefix}--universal-banner-text-container">
          <slot name="heading"></slot>
          <slot name="copy"></slot>
        </div>

        <div class="${prefix}--universal-banner-cta-container">
          <slot name="cta" @slotchange="${this._handleButtonSlotChange}"></slot>
          <dds-link-with-icon href="${ifNonNull(this.buttonHref)}">
            ${this.buttonCopy}${ArrowRight20({ slot: 'icon' })}
          </dds-link-with-icon>
        </div>
      </div>
    `;
  }

  /**
   * A selector that will return the CTA button
   */
  static get ctaButton() {
    return `${ddsPrefix}-button-cta`;
  }

  static styles = styles; // `styles` here is a `CSSResult` generated by custom WebPack loader
}

/* @__GENERATE_REACT_CUSTOM_ELEMENT_TYPE__ */
export default DDSUniversalBanner;
