/**
 * @license
 *
 * Copyright IBM Corp. 2020, 2021
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

import { customElement, property, html, LitElement } from 'lit-element';
import { classMap } from 'lit-html/directives/class-map';
import settings from 'carbon-components/es/globals/js/settings.js';
import ddsSettings from '@carbon/ibmdotcom-utilities/es/utilities/settings/settings.js';
import '../horizontal-rule/horizontal-rule';
import StableSelectorMixin from '../../globals/mixins/stable-selector';
import styles from './leadspace-with-search.scss';
import { ADJACENT_THEMES } from './defs';

const { prefix } = settings;
const { stablePrefix: ddsPrefix } = ddsSettings;

/**
 * Leadspace with Search
 *
 * @element dds-leadspace-with-search
 */
@customElement(`${ddsPrefix}-leadspace-with-search`)
class DDSLeadspaceWithSearch extends StableSelectorMixin(LitElement) {
  /**
   * `true` if there is an image.
   */
  @property({ attribute: 'has-image', reflect: true, type: Boolean })
  protected _hasImage = false;

  /**
   * The adjacent theme.
   *
   * Color scheme options are:
   * "white-and-g10",
   * "g10-and-white",
   * "g90-and-g100",
   * "g100-and-g90"
   */
  @property({ attribute: 'adjacent-theme', reflect: true })
  theme = ADJACENT_THEMES.MONOTHEME;

  /**
   * Handles `slotchange` event.
   *
   * @param event The event.
   */
  protected _handleImageSlotChange({ target }: Event) {
    this._hasImage = (target as HTMLSlotElement)
      .assignedNodes()
      .some(node => node.nodeType !== Node.TEXT_NODE || node!.textContent!.trim());
  }

  /**
   * Returns a class-name based on the Adjacent theme type
   */
  protected _getSearchClass() {
    return classMap({
      [`${prefix}--search-container`]: true,
      [`${prefix}--search-container-adjacent-theme`]: this.theme !== ADJACENT_THEMES.MONOTHEME || this._hasImage,
    });
  }

  render() {
    return html`
      <div class="${prefix}--content-layout">
        <slot name="heading"></slot>
        <div class="${prefix}--content-layout__body">
          <slot name="content"></slot>
        </div>
      </div>
      <div class="${this._getSearchClass()}">
        <slot name="search"></slot>
      </div>
      <slot name="hr"></slot>
      <slot @slotchange=${this._handleImageSlotChange} name="image"></slot>
    `;
  }

  static get stableSelector() {
    return `${ddsPrefix}--leadspace-with-search`;
  }

  static styles = styles; // `styles` here is a `CSSResult` generated by custom WebPack loader
}

/* @__GENERATE_REACT_CUSTOM_ELEMENT_TYPE__ */
export default DDSLeadspaceWithSearch;
