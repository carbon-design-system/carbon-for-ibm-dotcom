/**
 * @license
 *
 * Copyright IBM Corp. 2020, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

import { LitElement, html } from 'lit';
import { property } from 'lit/decorators.js';
import { classMap } from 'lit/directives/class-map.js';
import settings from '../../internal/vendor/@carbon/ibmdotcom-utilities/utilities/settings/settings';
import '../horizontal-rule/horizontal-rule';
import StableSelectorMixin from '../../globals/mixins/stable-selector';
import styles from './leadspace-with-search.scss';
import { ADJACENT_THEMES, DUAL_THEMES } from './defs';
import StickyHeader from '../../internal/vendor/@carbon/ibmdotcom-utilities/utilities/StickyHeader/StickyHeader';
import { carbonElement as customElement } from '../../internal/vendor/@carbon/web-components/globals/decorators/carbon-element';
import { themes } from '@carbon/themes';
const { prefix, stablePrefix: c4dPrefix } = settings;

/**
 * Leadspace with Search
 *
 * @element c4d-leadspace-with-search
 */
@customElement(`${c4dPrefix}-leadspace-with-search`)
class C4DLeadspaceWithSearch extends StableSelectorMixin(LitElement) {
  /**
   * sets the heading for sticky search
   */
  @property()
  protected _heading = '';

  /**
   * `true` if there is an image.
   */
  @property({ attribute: 'scroll-behavior', reflect: true, type: Boolean })
  protected _scrollBehavior = false;

  /**
   * The adjacent theme.
   *
   * Options are:
   * "monotheme",
   * "dual-theme"
   *
   */
  @property({ attribute: 'adjacent-theme', reflect: true })
  adjacentTheme = ADJACENT_THEMES.MONOTHEME;

  /**
   * The adjacent theme.
   *
   * Color scheme options are:
   * "white-and-g10",
   * "g10-and-white",
   * "g90-and-g100",
   * "g100-and-g90"
   */
  @property({ attribute: 'dual-theme', reflect: true })
  dualTheme = DUAL_THEMES.MONOTHEME;

  /**
   * Handles `slotchange` event.
   *
   * @param event The event.
   * @param event.target The event target.
   */
  protected _handleHeadingSlotChange({ target }: Event) {
    // @ts-ignore
    this._heading = (
      (target as HTMLSlotElement).assignedNodes()[0] as HTMLElement
    ).querySelector('h1')?.innerText;
  }

  /**
   * Returns a class-name based on the Adjacent theme type
   */
  protected _getSearchClass() {
    return classMap({
      [`${prefix}--search-container`]: true,
      [`${prefix}--search-container-dual-theme`]:
        this.adjacentTheme === ADJACENT_THEMES.DUAL_THEME,
    });
  }

  protected firstUpdated() {
    StickyHeader.global.leadspaceWithSearch = this;

    this.querySelector(`${c4dPrefix}-leadspace-heading`)?.setAttribute(
      'type-style',
      'fluid-heading-05'
    );
  }

  updated() {
    const currentBackground = window
      .getComputedStyle(this)
      .getPropertyValue('--cds-background');
    const currentTheme = Object.keys(themes).find(
      (colorName) => themes[colorName].background === currentBackground
    );

    if (this.adjacentTheme === ADJACENT_THEMES.DUAL_THEME) {
      for (const key in DUAL_THEMES) {
        if (DUAL_THEMES[key].startsWith(currentTheme)) {
          this.dualTheme = DUAL_THEMES[key];
          break;
        }
      }
    } else {
      this.dualTheme = '' as any;
    }
  }

  render() {
    return html`
      <div class="${prefix}--content-layout">
        <slot
          name="heading"
          @slotchange=${this._handleHeadingSlotChange}></slot>
        <div class="${prefix}--content-layout__body">
          <slot name="copy"></slot>
        </div>
      </div>
      <div class="${this._getSearchClass()}">
        <div class="${prefix}--search-container-inner">
          <div class="${prefix}--sticky-header">${this._heading}</div>
          <slot name="search"></slot>
        </div>
      </div>
      <slot name="hr"></slot>
    `;
  }

  static get stableSelector() {
    return `${c4dPrefix}--leadspace-with-search`;
  }

  static styles = styles; // `styles` here is a `CSSResult` generated by custom WebPack loader
}

/* @__GENERATE_REACT_CUSTOM_ELEMENT_TYPE__ */
export default C4DLeadspaceWithSearch;
