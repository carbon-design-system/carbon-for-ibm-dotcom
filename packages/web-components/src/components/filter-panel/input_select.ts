/**
 * @license
 *
 * Copyright IBM Corp. 2020, 2021
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

import { customElement, html, property, LitElement } from 'lit-element';
import ddsSettings from '@carbon/ibmdotcom-utilities/es/utilities/settings/settings.js';
import settings from 'carbon-components/es/globals/js/settings';
import Close from 'carbon-web-components/es/icons/close/16';
import StableSelectorMixin from '../../globals/mixins/stable-selector';
import styles from './filter-panel.scss';
import DDSInputSelectItem from './input_select_item';

const { prefix } = settings;
const { stablePrefix: ddsPrefix } = ddsSettings;

@customElement(`${ddsPrefix}-input-select`)
class DDSInputSelect extends StableSelectorMixin(LitElement) {
  @property()
  isOpen = false;

  @property({ type: String, reflect: true })
  selectValue = '';

  @property()
  title!: string;

  protected _toggleSelect = () => {
    this.isOpen = !this.isOpen;
  };

  @property()
  selected: string = '';

  @property()
  value: string = '';

  @property()
  lastValue: any;

  static get selectorItem() {
    return `${ddsPrefix}-input-select-item`;
  }

  protected _handleClickInner(event: MouseEvent) {
    const { eventContentStateChange } = this.constructor as typeof DDSInputSelect;
    const selected = (event.target as Element).closest(
      (this.constructor as typeof DDSInputSelect).selectorItem
    ) as DDSInputSelectItem;
    if (selected.hasAttribute('selected')) {
      selected.removeAttribute('selected');
    } else {
      if (this.lastValue) {
        this.lastValue.removeAttribute('selected');
      }

      selected.setAttribute('selected', '');
    }

    this.dispatchEvent(
      new CustomEvent(eventContentStateChange, {
        bubbles: true,
        composed: true,
        detail: {
          value: selected.getAttribute('value'),
          lastValue: this.lastValue ? this.lastValue.getAttribute('value') : '',
        },
      })
    );
    this.lastValue = selected;
  }

  @property()
  _items: any[] = [];

  /**
   * Handles `slotchange` event.
   *
   * @param event The event.
   */
  protected _handleSlotChange({ target }: Event) {
    this._items = (target as HTMLSlotElement)
      .assignedNodes()
      .filter(node => node.nodeType !== Node.TEXT_NODE || node!.textContent!.trim());
  }

  protected _tierOneElementIsSelected = () => {
    if (this.isOpen && !this.selectValue) {
      return `${prefix}--selected__option`;
    }
    return null;
  };

  render() {
    const { title } = this;
    return html`
      <div class="${prefix}--input_container">
        <div
          class="${this._tierOneElementIsSelected()} ${prefix}--input_container-heading"
          tabindex="1"
          @click=${this._toggleSelect}
        >
          <span>${title}</span>
          <div class="${prefix}--close_icon">
            ${!this.selectValue && this.isOpen ? Close() : null}
          </div>
        </div>
        <ul
          @click=${this._handleClickInner}
          class="${this.isOpen ? '' : `${prefix}--selected__option_dropdown_hidden`} ${prefix}--selected__option_dropdown"
        >
          <slot @slotchange="${this._handleSlotChange}"></slot>
        </ul>
      </div>
    `;
  }

  /**
   * The name of the custom event fired after the search content is changed upon a user gesture.
   */
  static get eventContentStateChange() {
    return `${ddsPrefix}-input-select`;
  }

  static styles = styles; // `styles` here is a `CSSResult` generated by custom WebPack loader
}

export default DDSInputSelect;
