/**
 * @license
 *
 * Copyright IBM Corp. 2020, 2021
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

import { customElement, html, property, LitElement } from 'lit-element';
import ddsSettings from '@carbon/ibmdotcom-utilities/es/utilities/settings/settings.js';
import settings from 'carbon-components/es/globals/js/settings';
import Close from 'carbon-web-components/es/icons/close/16';
import StableSelectorMixin from '../../globals/mixins/stable-selector';
import styles from './filter-panel.scss';

const { prefix } = settings;
const { stablePrefix: ddsPrefix } = ddsSettings;

@customElement(`${ddsPrefix}-input-select`)
class DDSInputSelect extends StableSelectorMixin(LitElement) {
  @property()
  isOpen = false;

  @property({ type: String, reflect: true })
  selectValue = '';

  @property()
  options: string[] = ['Content Management System', 'Digital Asset Management', 'Document Management', 'Web Content Management'];

  @property()
  title!: string;

  protected _toggleSelect = () => {
    this.isOpen = !this.isOpen;
  };

  /**
   * Returns a value
   */
  protected _setValue(value: string, e) {
    e.stopPropagation();
    this.selectValue = value;
    const { eventContentStateChange } = this.constructor as typeof DDSInputSelect;

    this.dispatchEvent(
      new CustomEvent(eventContentStateChange, {
        bubbles: true,
        composed: true,
        detail: {
          value: value,
        },
      })
    );
  }

  protected _tierOneElementIsSelected = () => {
    if (this.isOpen && !this.selectValue) {
      return `${prefix}--selected__option`;
    }
    return null;
  };

  render() {
    const { title } = this;
    return html`
      <div class="${prefix}--input_container">
        <div
          class="${this._tierOneElementIsSelected()} ${prefix}--input_container-heading"
          tabindex="1"
          @click=${this._toggleSelect}
        >
          <span>${title}</span>
          <div class="${prefix}--close_icon">
            ${!this.selectValue && this.isOpen ? Close() : null}
          </div>
        </div>
        <ul class="${this.isOpen ? '' : `${prefix}--selected__option_dropdown_hidden`} ${prefix}--selected__option_dropdown">
          ${this.options.map((option, idx) => {
            const selectedOption = this.selectValue;
            return html`
              <li
                id="${idx}"
                @click=${e => this._setValue(option, e)}
                class="${prefix}--input_container-option ${selectedOption === option ? `${prefix}--selected__option` : ''}"
              >
                ${option}
                <div class="${prefix}--close_icon" @click=${e => this._setValue('', e)}>
                  ${selectedOption === option ? Close() : null}
                </div>
              </li>
            `;
          })}
        </ul>
      </div>
    `;
  }

  /**
   * The name of the custom event fired after the search content is changed upon a user gesture.
   */
  static get eventContentStateChange() {
    return `${ddsPrefix}-input-select`;
  }

  static styles = styles; // `styles` here is a `CSSResult` generated by custom WebPack loader
}

export default DDSInputSelect;
