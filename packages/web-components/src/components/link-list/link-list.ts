/**
 * @license
 *
 * Copyright IBM Corp. 2020, 2021
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import { customElement, html, LitElement, property } from 'lit-element';
import settings from 'carbon-components/es/globals/js/settings';
import ddsSettings from '@carbon/ibmdotcom-utilities/es/utilities/settings/settings';
import StableSelectorMixin from '../../globals/mixins/stable-selector';
import { LINK_LIST_TYPE } from './defs';
import styles from './link-list.scss';

export { LINK_LIST_TYPE };

const { prefix } = settings;
const { stablePrefix: ddsPrefix } = ddsSettings;

/**
 * Link list.
 *
 * @element dds-link-list
 * @slot heading - The heading content.
 */
@customElement(`${ddsPrefix}-link-list`)
class DDSLinkList extends StableSelectorMixin(LitElement) {
  /**
   * Returns a class-name based on the parameter type
   */
  private ulClasses() {
    switch (this.type) {
      case LINK_LIST_TYPE.HORIZONTAL:
        return `${prefix}--link-list__list--horizontal`;
      case LINK_LIST_TYPE.VERTICAL:
        return `${prefix}--link-list__list--vertical`;
      case LINK_LIST_TYPE.END:
        return `${ddsPrefix}-ce--link-list__list--end`;
      default:
        return `${prefix}--link-list__list--card`;
    }
  }

  /**
   * Handler for @slotChange, toggles the split layout class and set the children link-list-item to the same height
   *
   * @private
   */
  private _handleSlotChange(event: Event) {
    const { selectorItem } = this.constructor as typeof DDSLinkList;
    const childItems = (event.target as HTMLSlotElement)
      .assignedNodes({ flatten: true })
      .filter(node => node.nodeType === Node.ELEMENT_NODE && (node as Element)?.matches(selectorItem)) as Element[];

    if (this.type === LINK_LIST_TYPE.END) {
      childItems.forEach(item => item.classList.add(`${prefix}--link-list-item__end`));

      if (childItems.length > 3) {
        this.classList.add((this.constructor as typeof DDSLinkList).classSplitLayout);
      }
    }
  }

  /**
   * The link list type.
   */
  @property({ reflect: true })
  type = LINK_LIST_TYPE.DEFAULT;

  render() {
    return html`
      <h4 class="${prefix}--link-list__heading"><slot name="heading"></slot></h4>
      <ul name="list" class="${prefix}--link-list__list ${this.ulClasses()}">
        <slot @slotchange="${this._handleSlotChange}"></slot>
      </ul>
    `;
  }

  /**
   * The CSS class for the "split layout".
   */
  static get classSplitLayout() {
    return `${prefix}--link-list__split`;
  }

  /**
   * A selector selecting the child items.
   */
  static get selectorItem() {
    return `${ddsPrefix}-link-list-item`;
  }

  static get stableSelector() {
    return `${ddsPrefix}--link-list`;
  }

  static styles = styles; // `styles` here is a `CSSResult` generated by custom WebPack loader
}

export default DDSLinkList;
