/**
 * @license
 *
 * Copyright IBM Corp. 2020
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

import { html, internalProperty, customElement, LitElement, TemplateResult } from 'lit-element';
import settings from 'carbon-components/es/globals/js/settings.js';
import ddsSettings from '@carbon/ibmdotcom-utilities/es/utilities/settings/settings.js';
import StableSelectorMixin from '../../globals/mixins/stable-selector';
import styles from './content-item.scss';

const { prefix } = settings;
const { stablePrefix: ddsPrefix } = ddsSettings;

/**
 * The table mapping slot name with the private property name that indicates the existence of the slot content.
 */
const slotExistencePropertyNames = {
  cta: '_hasCTA',
};

/**
 * Content item.
 *
 * @element dds-content-item
 * @slot media - The media content.
 * @slot heading - The heading content.
 * @slot cta - The footer (CTA) content.
 */
@customElement(`${ddsPrefix}-content-item`)
class DDSContentItem extends StableSelectorMixin(LitElement) {
  /**
   * `true` if there is a CTA content.
   */
  @internalProperty()
  _hasCTA = false;

  /**
   * Handles `slotchange` event on the CTA slot.
   *
   * @param event The event.
   */
  protected _handleSlotchange({ target }: Event) {
    const { name } = target as HTMLSlotElement;
    const hasContent = (target as HTMLSlotElement)
      .assignedNodes()
      .some(node => node.nodeType !== Node.TEXT_NODE || node!.textContent!.trim());
    this[slotExistencePropertyNames[name] || '_hasDefaultContent'] = hasContent;
  }

  /**
   * @returns The body content.
   */
  protected _renderBody(): TemplateResult | string | void {
    const { _hasCTA: hasCTA } = this;
    return html`
      <slot></slot>
      <div ?hidden="${!hasCTA}" class="${prefix}--content-item__cta">
        <slot name="cta" @slotchange="${this._handleSlotchange}"></slot>
      </div>
    `;
  }

  render() {
    return html`
      <slot name="heading"></slot>
      <div>
        <slot name="media"></slot>
      </div>
      ${this._renderBody()}
    `;
  }

  static get stableSelector() {
    return `${ddsPrefix}--content-item`;
  }

  static styles = styles; // `styles` here is a `CSSResult` generated by custom WebPack loader
}

export default DDSContentItem;
