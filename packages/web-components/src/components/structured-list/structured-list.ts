/**
 * * @license
 *
 * Copyright IBM Corp. 2019, 2021
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import { html, property, customElement, LitElement, query } from 'lit-element';
import ddsSettings from '@carbon/ibmdotcom-utilities/es/utilities/settings/settings.js';
import settings from 'carbon-components/es/globals/js/settings';
import styles from './structured-list.scss';
import StableSelectorMixin from '../../globals/mixins/stable-selector';
import DDSStructuredListRow from './structured-list-row';

const { stablePrefix: ddsPrefix } = ddsSettings;
const { prefix } = settings;

/**
 * StructuredList
 *
 * @element dds-structured-list
 */
@customElement(`${ddsPrefix}-structured-list`)
class DDSStructuredList extends StableSelectorMixin(LitElement) {
  _rows: DDSStructuredListRow[] = [];

  _headerRows: DDSStructuredListRow[] = [];

  _bodyRows: DDSStructuredListRow[] = [];

  _footerRows: DDSStructuredListRow[] = [];

  @property({ attribute: 'id', reflect: true })
  tableId?: string;

  @property()
  hasComplexHeaders: boolean = false;

  connectedCallback() {
    if (!this.hasAttribute('role')) {
      this.setAttribute('role', 'table');
    }

    if (!this.tableId) {
      // create random 5-character alphanumeric string
      const uid = Math.random()
        .toString(36)
        .substring(2, 7);

      // prefix with `dds-` to ensure valid HTML ID attribute
      this.tableId = `dds-${uid}`;
    }

    this._handleSlotChange();
    super.connectedCallback();
  }

  _handleSlotChange() {
    console.log('slot change');

    const rowChildren = Array.from(this.querySelectorAll(`${ddsPrefix}-structured-list-row`));
    const groupRows = Array.from(this.querySelectorAll(`${ddsPrefix}-structured-list-group`)).map(group =>
      group.shadowRoot?.querySelector(`${ddsPrefix}-structured-list-row`)
    );

    // Merge lightdom/shadowdom rows
    // Sort rows vertically
    const allRows = ([...rowChildren, ...groupRows] as [DDSStructuredListRow]).sort((a, b) => {
      if (a?.offsetTop > b?.offsetTop) return 1;
      if (a?.offsetTop < b?.offsetTop) return -1;
      return 0;
    });

    // Sort table rows into vertical order
    this._rows = allRows;

    this._headerRows = allRows!.filter(row => row?.slot === 'header');

    this._bodyRows = allRows!.filter(row => !['header', 'footer'].includes(row?.slot));

    this._footerRows = allRows!.filter(row => row?.slot === 'footer');

    this.requestUpdate();
  }

  _renderTableHeader() {
    const { _headerRows: headerRows } = this;

    return headerRows.length > 0
      ? html`
          <div class="${prefix}--structured-list-head" role="rowgroup">
            <slot name="header"></slot>
          </div>
        `
      : '';
  }

  _renderTableBody() {
    const { _bodyRows: bodyRows } = this;

    return bodyRows.length > 0
      ? html`
          <div class="${prefix}--structured-list-body" role="rowgroup">
            <slot></slot>
          </div>
        `
      : '';
  }

  _renderTableFooter() {
    const { _footerRows: footerRows } = this;

    return footerRows.length > 0
      ? html`
          <div class="${prefix}--structured-list-foot" role="rowgroup">
            <slot name="footer"></slot>
          </div>
        `
      : '';
  }

  render() {
    const { _handleSlotChange: handleSlotChange } = this;

    return html`
      <section @slotchange="${handleSlotChange}" class="${prefix}--structured-list">
        ${this._renderTableHeader()} ${this._renderTableBody()} ${this._renderTableFooter()}
      </section>
    `;
  }

  static styles = styles; // `styles` here is a `CSSResult` generated by custom WebPack loader

  public get rows() {
    return this._rows;
  }
}

/* @__GENERATE_REACT_CUSTOM_ELEMENT_TYPE__ */
export default DDSStructuredList;
