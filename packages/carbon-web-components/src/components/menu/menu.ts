import { LitElement, html } from 'lit';
import { prefix } from '../../globals/settings';
import { property } from 'lit/decorators.js';
import styles from './menu.scss?lit';
import { carbonElement as customElement } from '../../globals/decorators/carbon-element';
import HostListener from '../../globals/decorators/host-listener';
import HostListenerMixin from '../../globals/mixins/host-listener';
import { classMap } from 'lit/directives/class-map.js';

/**
 * Menu.
 *
 * @element cds-menu
 */
@customElement(`${prefix}-menu`)
class CDSMenu extends HostListenerMixin(LitElement) {
  readonly spacing: Number = 8; // distance to keep to window edges, in px
  /**
   * Action button width.
   */
  @property()
  actionButtonWidth;
  /**
   * Checks if document direction is rtl.
   */
  @property({ type: Boolean })
  isRtl = false;

  /**
   * Document direction.
   */
  @property({ type: String })
  direction = 'ltr';

  /**
   * Open value for the menu .
   */
  @property({ type: String })
  open;
  /**
   * Open value for the menu .
   */
  @property({ type: Boolean })
  isOpen = true;
  /**
   * Active element in the DOM .
   */
  @property({ type: HTMLElement })
  focusreturn;
  /**
   * Position of the Menu .
   */
  @property()
  position: [
    Number | (Number | null | undefined)[],
    Number | (Number | null | undefined)[]
  ] = [-1, -1];
  /**
   * Specify how the menu should align with the button element
   */
  @property({ type: String })
  menuAlignment;
  /**
   * Position of the Menu in X axis .
   */
  @property()
  x: Number | Number[] = 0;
  /**
   * Position of the Menu in Y axis .
   */
  @property()
  y: Number | Number[] = 0;

  _notEmpty = (value: Number | null | undefined) => {
    return value !== null && value !== undefined;
  };

  updated(changedProperties) {
    this.isOpen = this.open !== 'false';
    if (changedProperties.has('isOpen') && this.isOpen) {
      this._handleOpen();
    }
  }
  _xyStringToNumberConversion = (val) => {
    let res;
    if (val.includes(',')) {
      res = val.split(',').map(function (item) {
        return parseInt(item);
      });
    } else {
      res = parseInt(val);
    }
    return res;
  };
  _handleOpen = () => {
    this.x = this._xyStringToNumberConversion(String(this.x));
    this.y = this._xyStringToNumberConversion(String(this.y));
    if (this.isRtl) {
      this.style.insetInlineStart = `initial`;
      this.style.insetInlineEnd = `${this.x[0]}px`;
    } else {
      this.style.insetInlineStart = `${this.x[1]}px`;
      this.style.insetInlineEnd = `initial`;
    }
    this.style.insetBlockStart = `${this.y[1]}px`;
  };
  firstUpdated() {
    this.isRtl = this.direction === 'rtl';
  }
  render() {
    const { isOpen, menuAlignment, x, y } = this;
    const menuClasses = classMap({
      [`${prefix}--menu`]: true,
      [`${prefix}--menu--shown`]: true,
      [`${prefix}--menu--open`]: isOpen,
      [`${prefix}--menu--with-icons`]: true,
    });
    return html`
      <ul class="${menuClasses}">
        <slot></slot>
      </ul>
    `;
  }
  static styles = styles; // `styles` here is a `CSSResult` generated by custom Vite loader
}
export default CDSMenu;
