import { LitElement, html } from 'lit';
import { prefix } from '../../globals/settings';
import { property } from 'lit/decorators.js';
import styles from './menu.scss?lit';
import { carbonElement as customElement } from '../../globals/decorators/carbon-element';
import HostListener from '../../globals/decorators/host-listener';
import HostListenerMixin from '../../globals/mixins/host-listener';
import { classMap } from 'lit/directives/class-map.js';

/**
 * Menu.
 *
 * @element cds-menu
 */
@customElement(`${prefix}-menu`)
class CDSMenu extends HostListenerMixin(LitElement) {
  /**
   * Checks if document direction is rtl.
   */
  @property({ type: Boolean })
  isRtl = false;

  /**
   * Document direction.
   */
  @property({ type: String })
  direction = 'ltr';

  /**
   * Open value for the menu .
   */
  @property({ type: String })
  open;
  /**
   * Open value for the menu .
   */
  @property({ type: Boolean })
  isOpen = true;
  /**
   * Active element in the DOM .
   */
  @property({ type: HTMLElement })
  focusreturn;
  /**
   * Position of the Menu .
   */
  @property()
  position: [
    Number | (Number | null | undefined)[],
    Number | (Number | null | undefined)[]
  ] = [-1, -1];

  updated() {
    this.isOpen = this.open !== 'false';
    // if (this.open) {
    //   // this._handleOpen();
    // } else {
    //   this.position = [-1, -1];
    // }
  }
  // _handleOpen() {
  //   if (this.isRtl) {
  //     this.style.insetInlineStart = `initial`;
  //     this.style.insetInlineEnd = `${this.position[0]}px`;
  //   } else {
  //     this.style.insetInlineStart = `${this.position[0]}px`;
  //     this.style.insetInlineEnd = `initial`;
  //   }
  //   this.style.insetBlockStart = `${this.position[1]}px`;
  // }
  firstUpdated() {
    this.isRtl = this.direction === 'rtl';
  }
  render() {
    const { isOpen } = this;
    const menuClasses = classMap({
      [`${prefix}--menu`]: true,
      [`${prefix}--menu--shown`]: true,
      [`${prefix}--menu--open`]: isOpen,
      [`${prefix}--menu--with-icons`]: true,
    });
    return html`
      <ul class="${menuClasses}">
        <slot></slot>
      </ul>
    `;
  }
  static styles = styles; // `styles` here is a `CSSResult` generated by custom Vite loader
}
export default CDSMenu;
