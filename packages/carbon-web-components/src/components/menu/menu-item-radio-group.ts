/**
 * @license
 *
 * Copyright IBM Corp. 2024
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

import { LitElement, html } from 'lit';
import { property } from 'lit/decorators.js';
import { prefix } from '../../globals/settings';
import styles from './menu-item.scss?lit';
import { carbonElement as customElement } from '../../globals/decorators/carbon-element';
import Checkmark16 from '@carbon/icons/lib/checkmark/16';
import { ChangeEventHandler } from 'react';

/**
 * Menu Item.
 *
 * @element cds-menu-item-radio-group
 */
@customElement(`${prefix}-menu-item-radio-group`)
class CDSmenuItemRadioGroup extends LitElement {
  /**
   * Label for the menu item radio group.
   */
  @property({ type: String })
  label;
  /**
   * List of items in the radio group.
   */
  @property({ type: Array })
  items = [];

  /**
   * Selected item in the radio group.
   */
  @property({ type: String, attribute: true })
  selectedItem;

  /**
   * List of items in the radio group.
   */
  @property()
  itemToString?: (item: Array<String | number>) => String;
  /**
   * Provide an optional function to be called when the selection state changes.
   */
  @property()
  onChange?: ChangeEventHandler;

  _handleClick = (item, e) => {
    this.selectedItem = item;
    if (this.onChange) {
      this.onChange(e);
    }
  };
  render() {
    const defaultItemToString = (item) => item.toString();
    const {
      label,
      items,
      itemToString = defaultItemToString,
      selectedItem,
      _handleClick: handleClick,
    } = this;
    return html`
      <li class="${prefix}--menu-item-radio-group" role="none">
        <ul role="group" aria-label="${label}">
          ${items.map(
            (item) =>
              html`
                <cds-menu-item
                  label="${itemToString(item)}"
                  role="menuitemradio"
                  aria-checked="${item === selectedItem}"
                  .renderIcon="${item === selectedItem ? Checkmark16 : ''}"
                  .onClick="${(e) => {
                    handleClick(item, e);
                  }}"></cds-menu-item>
              `
          )}
        </ul>
      </li>
    `;
  }
  static styles = styles; // `styles` here is a `CSSResult` generated by custom Vite loader
}
export default CDSmenuItemRadioGroup;
