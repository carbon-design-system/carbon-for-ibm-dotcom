//
// Copyright IBM Corp. 2019, 2023
//
// This source code is licensed under the Apache-2.0 license found in the
// LICENSE file in the root directory of this source tree.
//

$css--plex: true !default;

// Definitely needed.
@use '@carbon/styles/scss/config' as *;
@use '@carbon/styles/scss/spacing';
@use '@carbon/styles/scss/utilities/convert';
@use '@carbon/styles/scss/theme';

// Using specific pieces of button styles rather than the whole kitchen sink.
@use '@carbon/styles/scss/components/button/vars' as *;
@use '@carbon/styles/scss/components/button/tokens' as *;
// @use '@carbon/styles/scss/components/button/button' as *;
/**
 * This is the whole kitchen sink. I don't think it's needed, other than perhaps
 * to give the @extend statements something to inherit from.
 */
// @use '@carbon/styles/scss/components/button' as *;

/**
 * This brings along layout utility classes that, strictly speaking, aren't
 * necessary. However, it also sets layout "tokens"/CSS custom properties that
 * are required for component to appear correctly.
 */
// @use '@carbon/styles/scss/layout';

// Not sure why we need to include the code-snippet here.
// @use '@carbon/styles/scss/components/code-snippet/code-snippet' as *;

// Not needed? Tooltips appear to work fine without it.
// @use '@carbon/styles/scss/components/tooltip';

// Not needed? Not sure where popovers fit into this equation.
// @use '@carbon/styles/scss/components/popover/index';

// @include code-snippet;

// Overrides work as expected ðŸ™Œ. Uncomment to see.
// .cds--btn--primary {
//   background-color: pink;
// }

:host(#{$prefix}-button),
:host(#{$prefix}-modal-footer-button) {
  // @include layout.emit-layout-tokens();

  display: inline-flex;

  ::slotted([slot='icon']) {
    // @extend .#{$prefix}--btn__icon;
  }

  .#{$prefix}--btn {
    flex-grow: 1;
    max-width: 100%;
  }
}

:host(#{$prefix}-button-skeleton) {
  // @include layout.emit-layout-tokens();
}

:host(#{$prefix}-button[isExpressive]) ::slotted([slot='icon']),
:host(#{$prefix}-modal-footer-button[isExpressive]) ::slotted([slot='icon']) {
  width: convert.rem(20px);
  height: convert.rem(20px);
}

:host(#{$prefix}-button[pagination]),
:host(#{$prefix}-modal-footer-button[pagination]) {
  .#{$prefix}--btn {
    border: none;
    border-left: 1px solid theme.$border-subtle;
    transition: none;

    &:focus {
      outline: spacing.$spacing-01 solid theme.$focus;
      outline-offset: -#{spacing.$spacing-01};
      box-shadow: none;
      border-left: 1px solid transparent;
    }
  }
}

:host(#{$prefix}-button[pagination]:not([disabled])),
:host(#{$prefix}-modal-footer-button[pagination]:not([disabled])) {
  .#{$prefix}--btn {
    color: theme.$icon-primary;
    &:active {
      background-color: theme.$layer-hover;
    }
  }
}

:host(#{$prefix}-button[pagination][batch-action]:not([disabled])),
:host(
    #{$prefix}-modal-footer-button[pagination][batch-action]:not([disabled])
  ) {
  .#{$prefix}--btn {
    padding: $button-padding-ghost;

    &:focus {
      outline: spacing.$spacing-01 solid theme.$layer;
      outline-offset: -#{spacing.$spacing-01};
    }
  }

  :host(#{$prefix}-button[pagination][has-main-content]:not([disabled])),
  :host(
      #{$prefix}-modal-footer-button[pagination][has-main-content]:not(
          [disabled]
        )
    ) {
    ::slotted([slot='icon']) {
      position: static;
      margin-left: spacing.$spacing-02;
    }
  }
}

:host(#{$prefix}-button[kind='ghost']:hover) .#{$prefix}--btn--ghost,
:host(#{$prefix}-button[kind='ghost']) .#{$prefix}--btn--ghost:active {
  outline: none;
}

:host(#{$prefix}-button-set) {
  // @extend .#{$prefix}--btn-set;

  ::slotted(#{$prefix}-button) {
    width: 100%;
    // 196px from design kit
    max-width: convert.rem(196px);
  }
}

:host(#{$prefix}-button-set[stacked]) {
  // @extend .#{$prefix}--btn-set--stacked;
}
