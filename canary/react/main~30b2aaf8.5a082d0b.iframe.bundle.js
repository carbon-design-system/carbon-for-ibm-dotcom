(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{"./src/components/ExpressiveModal/ExpressiveModal.js":function(e,n,t){"use strict";var o=t("../../node_modules/@babel/runtime/helpers/extends.js"),r=t.n(o),a=t("../../node_modules/@babel/runtime/helpers/defineProperty.js"),s=t.n(a),i=t("../../node_modules/@babel/runtime/helpers/slicedToArray.js"),l=t.n(i),p=t("../../node_modules/@babel/runtime/helpers/objectWithoutProperties.js"),c=t.n(p),d=t("../../node_modules/react/index.js"),u=t.n(d),m=t("../../node_modules/classnames/index.js"),b=t.n(m),h=t("./src/internal/vendor/carbon-components-react/components/ComposedModal/ComposedModal.js"),f=t("./src/internal/vendor/@carbon/ibmdotcom-utilities/utilities/settings/settings.js"),x=t("../../node_modules/@carbon/icons-react/es/close/20.js"),g=t("../../node_modules/prop-types/index.js"),v=t.n(g),y=t("../../node_modules/carbon-components/es/globals/js/settings.js"),E=["btnClassName","iconDescription","iconClassName"],O=f.a.stablePrefix,j=y.a.prefix,M=function(e){var n=e.btnClassName,t=e.iconDescription,o=e.iconClassName,a=c()(e,E);return u.a.createElement("button",r()({"data-autoid":"".concat(O,"--expressive-modal__close"),className:b()("".concat(j,"--modal-close"),n),title:t,type:"button"},a),u.a.createElement(x.a,{"aria-label":t,className:b()("".concat(j,"--modal-close__icon"),o)}))};M.propTypes={btnClassName:v.a.string,iconClassName:v.a.string,iconDescription:v.a.string},M.defaultProps={iconDescription:"Close"},M.__docgenInfo={description:"Close button for Expressive Modal.",methods:[],displayName:"ExpressiveModalCloseBtn",props:{iconDescription:{defaultValue:{value:"'Close'",computed:!1},description:"Accessible description that describes icon action.",type:{name:"string"},required:!1},btnClassName:{description:"A custom class name to the button.",type:{name:"string"},required:!1},iconClassName:{description:"A custom class name to the icon.",type:{name:"string"},required:!1}}};var C=M;"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/ExpressiveModal/ExpressiveModalCloseBtn.js"]={name:"ExpressiveModalCloseBtn",docgenInfo:M.__docgenInfo,path:"src/components/ExpressiveModal/ExpressiveModalCloseBtn.js"});var _=["open","className","children","fullwidth","onClose"],N=f.a.stablePrefix,S=y.a.prefix,B=function(e){var n=e.open,t=e.className,o=e.children,a=e.fullwidth,i=e.onClose,p=c()(e,_),m=Object(d.useState)(n),f=l()(m,2),x=f[0],g=f[1];return Object(d.useEffect)((function(){g(n)}),[n]),u.a.createElement(h.c,r()({onClose:i,open:x,"data-autoid":"".concat(N,"--expressive-modal"),className:b()("".concat(S,"--modal--expressive"),t,s()({},"".concat(S,"--modal--expressive--fullwidth"),a)),selectorPrimaryFocus:".".concat(S,"--modal-close")},p),u.a.createElement(C,{onClick:function(){!1!==(null==i?void 0:i())&&g(!1)}}),o)};B.propTypes={fullwidth:v.a.bool,open:v.a.bool,className:v.a.oneOfType([v.a.string,v.a.array]),children:v.a.node,onClose:v.a.func},B.defaultProps={open:!1},B.__docgenInfo={description:"Expressive Modal.",methods:[],displayName:"ExpressiveModal",props:{open:{defaultValue:{value:"false",computed:!1},description:"Sets whether the Modal is open/close.",type:{name:"bool"},required:!1},fullwidth:{description:"Sets whether the Modal is fullwidth or not.",type:{name:"bool"},required:!1},className:{description:"Custom classname(s) for the Modal.",type:{name:"union",value:[{name:"string"},{name:"array"}]},required:!1},children:{description:"Components/Elements to be rendered within the Modal.",type:{name:"node"},required:!1},onClose:{description:"Function to be triggered on close of Modal.",type:{name:"func"},required:!1}}};n.a=B;"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/ExpressiveModal/ExpressiveModal.js"]={name:"ExpressiveModal",docgenInfo:B.__docgenInfo,path:"src/components/ExpressiveModal/ExpressiveModal.js"})},"./src/components/ExpressiveModal/README.stories.mdx":function(e,n,t){"use strict";t.r(n);var o=t("../../node_modules/@babel/runtime/helpers/defineProperty.js"),r=t.n(o),a=t("../../node_modules/@babel/runtime/helpers/extends.js"),s=t.n(a),i=t("../../node_modules/@babel/runtime/helpers/objectWithoutProperties.js"),l=t.n(i),p=(t("../../node_modules/react/index.js"),t("../../node_modules/@mdx-js/react/dist/esm.js")),c=t("../../node_modules/@storybook/addon-docs/dist/esm/index.js"),d=t("../../node_modules/@storybook/addon-docs/blocks.js"),u=t("../../docs/contributing-license.md"),m=t("./src/components/ExpressiveModal/ExpressiveModal.js"),b=["components"];function h(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function f(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?h(Object(t),!0).forEach((function(n){r()(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):h(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}var x={};function g(e){var n=e.components,t=l()(e,b);return Object(p.b)("wrapper",s()({},x,t,{components:n,mdxType:"MDXLayout"}),Object(p.b)("h1",{id:"expressive-modal"},"Expressive modal"),Object(p.b)("blockquote",null,Object(p.b)("p",{parentName:"blockquote"},"The expressive modal is based on\n",Object(p.b)("a",{parentName:"p",href:"https://www.carbondesignsystem.com/components/modal/code",target:"_blank",rel:"nofollow noopener noreferrer"},"Carbon's Modal component"),"\nwith slight styling updates to increase readability and reduce strain.")),Object(p.b)("blockquote",null,Object(p.b)("p",{parentName:"blockquote"},"ðŸ’¡ Check our\n",Object(p.b)("a",{parentName:"p",href:"https://githubbox.com/carbon-design-system/carbon-for-ibm-dotcom/tree/main/packages/react/examples/codesandbox/components/ExpressiveModal",target:"_blank",rel:"nofollow noopener noreferrer"},"CodeSandbox"),"\nexample implementation.")),Object(p.b)("p",null,Object(p.b)("a",{parentName:"p",href:"https://githubbox.com/carbon-design-system/carbon-for-ibm-dotcom/tree/main/packages/react/examples/codesandbox/components/ExpressiveModal",target:"_blank",rel:"nofollow noopener noreferrer"},Object(p.b)("img",{parentName:"a",src:"https://codesandbox.io/static/img/play-codesandbox.svg",alt:"Edit @carbon/ibmdotcom-web-components"}))),Object(p.b)("h2",{id:"getting-started"},"Getting started"),Object(p.b)("p",null,"Here's a quick example to get you started."),Object(p.b)("h5",{id:"css"},"CSS"),Object(p.b)("pre",null,Object(p.b)("code",{parentName:"pre",className:"language-css"},"// yourapplication.scss\n@import '@carbon/type/scss/font-face/mono';\n@import '@carbon/type/scss/font-face/sans';\n@include carbon--font-face-mono();\n@include carbon--font-face-sans();\n@import '@carbon/ibmdotcom-styles/scss/components/expressive-modal/expressive-modal';\n")),Object(p.b)("blockquote",null,Object(p.b)("p",{parentName:"blockquote"},"ðŸ’¡ Only import fonts once per usage. Don't forget to import the\nExpressiveModal styles from\n",Object(p.b)("a",{parentName:"p",href:"https://github.com/carbon-design-system/carbon-for-ibm-dotcom/blob/main/packages/styles",target:"_blank",rel:"nofollow noopener noreferrer"},"@carbon/ibmdotcom-styles"),".")),Object(p.b)("h5",{id:"js"},"JS"),Object(p.b)("pre",null,Object(p.b)("code",{parentName:"pre",className:"language-javascript"},"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ExpressiveModal } from '@carbon/ibmdotcom-react';\nimport 'yourapplication.scss';\n\nfunction App() {\n  return (\n    <>\n      <ExpressiveModal open={true}>Hello world!</ExpressiveModal>\n    </>\n  );\n}\n\nReactDOM.render(<App />, document.querySelector('#app'));\n")),Object(p.b)("blockquote",null,Object(p.b)("p",{parentName:"blockquote"},"ðŸ’¡ See\n",Object(p.b)("a",{parentName:"p",href:"https://www.carbondesignsystem.com/components/modal/code",target:"_blank",rel:"nofollow noopener noreferrer"},"Carbon's Modal component"),"\nfor props and other usage documentation.")),Object(p.b)("p",null,"Add the following line in your ",Object(p.b)("inlineCode",{parentName:"p"},".env")," file at the root of your project.\n",Object(p.b)("a",{parentName:"p",href:"https://github.com/carbon-design-system/carbon-for-ibm-dotcom/tree/main/packages/styles#usage",target:"_blank",rel:"nofollow noopener noreferrer"},"See more details"),"."),Object(p.b)("pre",null,Object(p.b)("code",{parentName:"pre"},"  SASS_PATH=node_modules:src\n")),Object(p.b)("blockquote",null,Object(p.b)("p",{parentName:"blockquote"},"ðŸ’¡ Don't forget to import the expressive modal styles from\n",Object(p.b)("a",{parentName:"p",href:"https://github.com/carbon-design-system/carbon-for-ibm-dotcom/blob/main/packages/styles",target:"_blank",rel:"nofollow noopener noreferrer"},"@carbon/ibmdotcom-styles"),".")),Object(p.b)("h5",{id:"optional-"},"OPTIONAL ðŸ’¡"),Object(p.b)("p",null,"In addition, direct ES module imports can be used to speed up build compilation and have less reliance on tree-shaking determinations from build scripts:"),Object(p.b)("pre",null,Object(p.b)("code",{parentName:"pre",className:"language-js"},"import ExpressiveModal from '@carbon/ibmdotcom-react/es/components/ExpressiveModal/ExpressiveModal';\n")),Object(p.b)("h2",{id:"props"},"Props"),Object(p.b)(d.c,{of:m.a,mdxType:"Props"}),Object(p.b)("h2",{id:"stable-selectors"},"Stable selectors"),Object(p.b)("table",null,Object(p.b)("thead",{parentName:"table"},Object(p.b)("tr",{parentName:"thead"},Object(p.b)("th",{parentName:"tr",align:null},"Name"),Object(p.b)("th",{parentName:"tr",align:null},"Description"))),Object(p.b)("tbody",{parentName:"table"},Object(p.b)("tr",{parentName:"tbody"},Object(p.b)("td",{parentName:"tr",align:null},Object(p.b)("inlineCode",{parentName:"td"},"dds--expressive-modal")),Object(p.b)("td",{parentName:"tr",align:null},"Component")),Object(p.b)("tr",{parentName:"tbody"},Object(p.b)("td",{parentName:"tr",align:null},Object(p.b)("inlineCode",{parentName:"td"},"dds--expressive-modal__close")),Object(p.b)("td",{parentName:"tr",align:null},"Interactive")))),Object(p.b)("h2",{id:"stable-selectors-1"},"Stable selectors"),Object(p.b)("table",null,Object(p.b)("thead",{parentName:"table"},Object(p.b)("tr",{parentName:"thead"},Object(p.b)("th",{parentName:"tr",align:null},"Name"),Object(p.b)("th",{parentName:"tr",align:null},"Description"))),Object(p.b)("tbody",{parentName:"table"},Object(p.b)("tr",{parentName:"tbody"},Object(p.b)("td",{parentName:"tr",align:null},Object(p.b)("inlineCode",{parentName:"td"},"dds--expressive-modal")),Object(p.b)("td",{parentName:"tr",align:null},"Component")),Object(p.b)("tr",{parentName:"tbody"},Object(p.b)("td",{parentName:"tr",align:null},Object(p.b)("inlineCode",{parentName:"td"},"dds--expressive-modal__close")),Object(p.b)("td",{parentName:"tr",align:null},"Interactive")))),Object(p.b)(d.a,{markdown:u.a,mdxType:"Description"}))}g.isMDXComponent=!0;var v={includeStories:[]},y={};v.parameters=v.parameters||{},v.parameters.docs=f(f({},v.parameters.docs||{}),{},{page:function(){return Object(p.b)(c.a,{mdxStoryNameToKey:y,mdxComponentAnnotations:v},Object(p.b)(g,null))}}),n.default=v},"./src/components/ExpressiveModal/__stories__/ExpressiveModal.stories.js":function(e,n,t){"use strict";t.r(n),t.d(n,"Default",(function(){return x})),t.d(n,"Expanded",(function(){return g}));var o=t("../../node_modules/@babel/runtime/helpers/defineProperty.js"),r=t.n(o),a=t("../../node_modules/@storybook/addon-knobs/dist/index.js"),s=t("../../node_modules/@carbon/icons-react/es/arrow--right/20.js"),i=t("./src/components/ButtonGroup/index.js"),l=t("./src/components/ExpressiveModal/index.js"),p=t("../../node_modules/carbon-components-react/es/components/ComposedModal/ComposedModal.js"),c=t("../../node_modules/react/index.js"),d=t.n(c),u=t("./src/components/ExpressiveModal/README.stories.mdx");function m(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function b(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?m(Object(t),!0).forEach((function(n){r()(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):m(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function h(e){var n=e.title,t=e.paragraph,o=e.button;return d.a.createElement("div",null,n?d.a.createElement("h1",{style:{marginBottom:"16px"}},n):null,t?d.a.createElement("p",{style:{marginBottom:"48px"}},t):null,o?d.a.createElement(i.a,{buttons:[{href:"",copy:o,renderIcon:s.a}]}):null)}var f={ExpressiveModal:function(){return{open:Object(a.boolean)("Toggle modal",!0)}},Other:function(){return{title:Object(a.text)("Title (placeholder)","Lorem ipsum dolor sit amet"),paragraph:Object(a.text)("Paragraph (placeholder)","Quisque felis odio, egestas vel tempus iaculis, interdum vel eros. Phasellus pharetra, purus et pretium posuere, ipsum risus pulvinar leo, non rutrum tortor risus vitae quam. Nulla sed nibh felis. Maecenas nec tincidunt eros. Fusce sollicitudin sit amet quam eu fringilla. Donec tincidunt ut nisi vitae pharetra. Curabitur imperdiet ante sit amet mi laoreet, vitae facilisis ante convallis. Aenean quis dapibus augue. Sed nisl dui, scelerisque et augue eget, pharetra commodo elit. In venenatis sapien eu nisl congue suscipit."),button:Object(a.text)("Button (placeholder)","Lorem ipsum dolor")}}};n.default={title:"Components/Expressive modal",parameters:b(b(r()({storySource:{source:"\n    \n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"/**\\n * Copyright IBM Corp. 2016, 2022\\n *\\n * This source code is licensed under the Apache-2.0 license found in the\\n * LICENSE file in the root directory of this source tree.\\n */\\n\\nimport { boolean, text } from '@storybook/addon-knobs';\\nimport ArrowRight20 from '@carbon/icons-react/es/arrow--right/20';\\nimport { ButtonGroup } from '../../ButtonGroup';\\nimport { ExpressiveModal } from '../';\\nimport { ModalBody } from 'carbon-components-react';\\nimport React from 'react';\\nimport readme from '../README.stories.mdx';\\n\\n/**\\n * Dummy content for the modal story\\n *\\n * @returns {object} JSX object\\n */\\nfunction StoryContent({ title, paragraph, button }) {\\n  return (\\n    <div>\\n      {title ? <h1 style={{ marginBottom: '16px' }}>{title}</h1> : null}\\n      {paragraph ? <p style={{ marginBottom: '48px' }}>{paragraph}</p> : null}\\n      {button ? (\\n        <ButtonGroup\\n          buttons={[\\n            {\\n              href: '',\\n              copy: button,\\n              renderIcon: ArrowRight20,\\n            },\\n          ]}\\n        />\\n      ) : null}\\n    </div>\\n  );\\n}\\n\\nconst props = {\\n  ExpressiveModal: () => ({\\n    open: boolean('Toggle modal', true),\\n  }),\\n  Other: () => ({\\n    title: text('Title (placeholder)', 'Lorem ipsum dolor sit amet'),\\n    paragraph: text(\\n      'Paragraph (placeholder)',\\n      'Quisque felis odio, egestas vel tempus iaculis, interdum vel eros. Phasellus pharetra, purus et pretium posuere, ipsum risus pulvinar leo, non rutrum tortor risus vitae quam. Nulla sed nibh felis. Maecenas nec tincidunt eros. Fusce sollicitudin sit amet quam eu fringilla. Donec tincidunt ut nisi vitae pharetra. Curabitur imperdiet ante sit amet mi laoreet, vitae facilisis ante convallis. Aenean quis dapibus augue. Sed nisl dui, scelerisque et augue eget, pharetra commodo elit. In venenatis sapien eu nisl congue suscipit.'\\n    ),\\n    button: text('Button (placeholder)', 'Lorem ipsum dolor'),\\n  }),\\n};\\n\\nexport default {\\n  title: 'Components/Expressive modal',\\n  parameters: {\\n    ...readme.parameters,\\n    'carbon-theme': { disabled: true },\\n    percy: {\\n      name: 'Components|Expressive modal: Default',\\n    },\\n  },\\n};\\n\\nexport const Default = () => {\\n  const { open } = props?.ExpressiveModal() ?? {};\\n  const { title, paragraph, button } = props?.Other() ?? {};\\n  return (\\n    <ExpressiveModal open={open} className=\\\"bx--modal--expressive\\\">\\n      <ModalBody>\\n        <StoryContent title={title} paragraph={paragraph} button={button} />\\n      </ModalBody>\\n    </ExpressiveModal>\\n  );\\n};\\n\\nexport const Expanded = () => {\\n  const { open } = props?.ExpressiveModal() ?? {};\\n  const { title, paragraph, button } = props?.Other() ?? {};\\n  return (\\n    <ExpressiveModal\\n      open={open}\\n      fullwidth={true}\\n      className=\\\"bx--modal--expressive\\\">\\n      <ModalBody>\\n        <StoryContent title={title} paragraph={paragraph} button={button} />\\n      </ModalBody>\\n    </ExpressiveModal>\\n  );\\n};\\n\\nExpanded.story = {\\n  parameters: {\\n    percy: {\\n      name: 'Components|Expressive modal: Expanded',\\n    },\\n  },\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":23,\"line\":66},\"endLoc\":{\"col\":1,\"line\":76},\"startBody\":{\"col\":23,\"line\":66},\"endBody\":{\"col\":1,\"line\":76}},\"Expanded\":{\"startLoc\":{\"col\":24,\"line\":78},\"endLoc\":{\"col\":1,\"line\":91},\"startBody\":{\"col\":24,\"line\":78},\"endBody\":{\"col\":1,\"line\":91}}};\n    \n/**\n * Copyright IBM Corp. 2016, 2022\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { boolean, text } from '@storybook/addon-knobs';\nimport ArrowRight20 from '@carbon/icons-react/es/arrow--right/20';\nimport { ButtonGroup } from '../../ButtonGroup';\nimport { ExpressiveModal } from '../';\nimport { ModalBody } from 'carbon-components-react';\nimport React from 'react';\nimport readme from '../README.stories.mdx';\n\n/**\n * Dummy content for the modal story\n *\n * @returns {object} JSX object\n */\nfunction StoryContent({ title, paragraph, button }) {\n  return (\n    <div>\n      {title ? <h1 style={{ marginBottom: '16px' }}>{title}</h1> : null}\n      {paragraph ? <p style={{ marginBottom: '48px' }}>{paragraph}</p> : null}\n      {button ? (\n        <ButtonGroup\n          buttons={[\n            {\n              href: '',\n              copy: button,\n              renderIcon: ArrowRight20,\n            },\n          ]}\n        />\n      ) : null}\n    </div>\n  );\n}\n\nconst props = {\n  ExpressiveModal: () => ({\n    open: boolean('Toggle modal', true),\n  }),\n  Other: () => ({\n    title: text('Title (placeholder)', 'Lorem ipsum dolor sit amet'),\n    paragraph: text(\n      'Paragraph (placeholder)',\n      'Quisque felis odio, egestas vel tempus iaculis, interdum vel eros. Phasellus pharetra, purus et pretium posuere, ipsum risus pulvinar leo, non rutrum tortor risus vitae quam. Nulla sed nibh felis. Maecenas nec tincidunt eros. Fusce sollicitudin sit amet quam eu fringilla. Donec tincidunt ut nisi vitae pharetra. Curabitur imperdiet ante sit amet mi laoreet, vitae facilisis ante convallis. Aenean quis dapibus augue. Sed nisl dui, scelerisque et augue eget, pharetra commodo elit. In venenatis sapien eu nisl congue suscipit.'\n    ),\n    button: text('Button (placeholder)', 'Lorem ipsum dolor'),\n  }),\n};\n\nexport default {\n  title: 'Components/Expressive modal',\n  parameters: {\"storySource\":{\"source\":\"/**\\n * Copyright IBM Corp. 2016, 2022\\n *\\n * This source code is licensed under the Apache-2.0 license found in the\\n * LICENSE file in the root directory of this source tree.\\n */\\n\\nimport { boolean, text } from '@storybook/addon-knobs';\\nimport ArrowRight20 from '@carbon/icons-react/es/arrow--right/20';\\nimport { ButtonGroup } from '../../ButtonGroup';\\nimport { ExpressiveModal } from '../';\\nimport { ModalBody } from 'carbon-components-react';\\nimport React from 'react';\\nimport readme from '../README.stories.mdx';\\n\\n/**\\n * Dummy content for the modal story\\n *\\n * @returns {object} JSX object\\n */\\nfunction StoryContent({ title, paragraph, button }) {\\n  return (\\n    <div>\\n      {title ? <h1 style={{ marginBottom: '16px' }}>{title}</h1> : null}\\n      {paragraph ? <p style={{ marginBottom: '48px' }}>{paragraph}</p> : null}\\n      {button ? (\\n        <ButtonGroup\\n          buttons={[\\n            {\\n              href: '',\\n              copy: button,\\n              renderIcon: ArrowRight20,\\n            },\\n          ]}\\n        />\\n      ) : null}\\n    </div>\\n  );\\n}\\n\\nconst props = {\\n  ExpressiveModal: () => ({\\n    open: boolean('Toggle modal', true),\\n  }),\\n  Other: () => ({\\n    title: text('Title (placeholder)', 'Lorem ipsum dolor sit amet'),\\n    paragraph: text(\\n      'Paragraph (placeholder)',\\n      'Quisque felis odio, egestas vel tempus iaculis, interdum vel eros. Phasellus pharetra, purus et pretium posuere, ipsum risus pulvinar leo, non rutrum tortor risus vitae quam. Nulla sed nibh felis. Maecenas nec tincidunt eros. Fusce sollicitudin sit amet quam eu fringilla. Donec tincidunt ut nisi vitae pharetra. Curabitur imperdiet ante sit amet mi laoreet, vitae facilisis ante convallis. Aenean quis dapibus augue. Sed nisl dui, scelerisque et augue eget, pharetra commodo elit. In venenatis sapien eu nisl congue suscipit.'\\n    ),\\n    button: text('Button (placeholder)', 'Lorem ipsum dolor'),\\n  }),\\n};\\n\\nexport default {\\n  title: 'Components/Expressive modal',\\n  parameters: {\\n    ...readme.parameters,\\n    'carbon-theme': { disabled: true },\\n    percy: {\\n      name: 'Components|Expressive modal: Default',\\n    },\\n  },\\n};\\n\\nexport const Default = () => {\\n  const { open } = props?.ExpressiveModal() ?? {};\\n  const { title, paragraph, button } = props?.Other() ?? {};\\n  return (\\n    <ExpressiveModal open={open} className=\\\"bx--modal--expressive\\\">\\n      <ModalBody>\\n        <StoryContent title={title} paragraph={paragraph} button={button} />\\n      </ModalBody>\\n    </ExpressiveModal>\\n  );\\n};\\n\\nexport const Expanded = () => {\\n  const { open } = props?.ExpressiveModal() ?? {};\\n  const { title, paragraph, button } = props?.Other() ?? {};\\n  return (\\n    <ExpressiveModal\\n      open={open}\\n      fullwidth={true}\\n      className=\\\"bx--modal--expressive\\\">\\n      <ModalBody>\\n        <StoryContent title={title} paragraph={paragraph} button={button} />\\n      </ModalBody>\\n    </ExpressiveModal>\\n  );\\n};\\n\\nExpanded.story = {\\n  parameters: {\\n    percy: {\\n      name: 'Components|Expressive modal: Expanded',\\n    },\\n  },\\n};\\n\",\"locationsMap\":{\"default\":{\"startLoc\":{\"col\":23,\"line\":66},\"endLoc\":{\"col\":1,\"line\":76},\"startBody\":{\"col\":23,\"line\":66},\"endBody\":{\"col\":1,\"line\":76}},\"expanded\":{\"startLoc\":{\"col\":24,\"line\":78},\"endLoc\":{\"col\":1,\"line\":91},\"startBody\":{\"col\":24,\"line\":78},\"endBody\":{\"col\":1,\"line\":91}}}},\n    ...readme.parameters,\n    'carbon-theme': { disabled: true },\n    percy: {\n      name: 'Components|Expressive modal: Default',\n    },\n  },\n};\n\nexport const Default = () => {\n  const { open } = props?.ExpressiveModal() ?? {};\n  const { title, paragraph, button } = props?.Other() ?? {};\n  return (\n    <ExpressiveModal open={open} className=\"bx--modal--expressive\">\n      <ModalBody>\n        <StoryContent title={title} paragraph={paragraph} button={button} />\n      </ModalBody>\n    </ExpressiveModal>\n  );\n};;\n\nexport const Expanded = () => {\n  const { open } = props?.ExpressiveModal() ?? {};\n  const { title, paragraph, button } = props?.Other() ?? {};\n  return (\n    <ExpressiveModal\n      open={open}\n      fullwidth={true}\n      className=\"bx--modal--expressive\">\n      <ModalBody>\n        <StoryContent title={title} paragraph={paragraph} button={button} />\n      </ModalBody>\n    </ExpressiveModal>\n  );\n};\n\nExpanded.story = {\n  parameters: {\n    percy: {\n      name: 'Components|Expressive modal: Expanded',\n    },\n  },\n};\n",locationsMap:{default:{startLoc:{col:23,line:74},endLoc:{col:1,line:84},startBody:{col:23,line:74},endBody:{col:1,line:84}},expanded:{startLoc:{col:24,line:86},endLoc:{col:1,line:99},startBody:{col:24,line:86},endBody:{col:1,line:99}}}}},"storySource",{source:"/**\n * Copyright IBM Corp. 2016, 2022\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { boolean, text } from '@storybook/addon-knobs';\nimport ArrowRight20 from '@carbon/icons-react/es/arrow--right/20';\nimport { ButtonGroup } from '../../ButtonGroup';\nimport { ExpressiveModal } from '../';\nimport { ModalBody } from 'carbon-components-react';\nimport React from 'react';\nimport readme from '../README.stories.mdx';\n\n/**\n * Dummy content for the modal story\n *\n * @returns {object} JSX object\n */\nfunction StoryContent({ title, paragraph, button }) {\n  return (\n    <div>\n      {title ? <h1 style={{ marginBottom: '16px' }}>{title}</h1> : null}\n      {paragraph ? <p style={{ marginBottom: '48px' }}>{paragraph}</p> : null}\n      {button ? (\n        <ButtonGroup\n          buttons={[\n            {\n              href: '',\n              copy: button,\n              renderIcon: ArrowRight20,\n            },\n          ]}\n        />\n      ) : null}\n    </div>\n  );\n}\n\nconst props = {\n  ExpressiveModal: () => ({\n    open: boolean('Toggle modal', true),\n  }),\n  Other: () => ({\n    title: text('Title (placeholder)', 'Lorem ipsum dolor sit amet'),\n    paragraph: text(\n      'Paragraph (placeholder)',\n      'Quisque felis odio, egestas vel tempus iaculis, interdum vel eros. Phasellus pharetra, purus et pretium posuere, ipsum risus pulvinar leo, non rutrum tortor risus vitae quam. Nulla sed nibh felis. Maecenas nec tincidunt eros. Fusce sollicitudin sit amet quam eu fringilla. Donec tincidunt ut nisi vitae pharetra. Curabitur imperdiet ante sit amet mi laoreet, vitae facilisis ante convallis. Aenean quis dapibus augue. Sed nisl dui, scelerisque et augue eget, pharetra commodo elit. In venenatis sapien eu nisl congue suscipit.'\n    ),\n    button: text('Button (placeholder)', 'Lorem ipsum dolor'),\n  }),\n};\n\nexport default {\n  title: 'Components/Expressive modal',\n  parameters: {\n    ...readme.parameters,\n    'carbon-theme': { disabled: true },\n    percy: {\n      name: 'Components|Expressive modal: Default',\n    },\n  },\n};\n\nexport const Default = () => {\n  const { open } = props?.ExpressiveModal() ?? {};\n  const { title, paragraph, button } = props?.Other() ?? {};\n  return (\n    <ExpressiveModal open={open} className=\"bx--modal--expressive\">\n      <ModalBody>\n        <StoryContent title={title} paragraph={paragraph} button={button} />\n      </ModalBody>\n    </ExpressiveModal>\n  );\n};\n\nexport const Expanded = () => {\n  const { open } = props?.ExpressiveModal() ?? {};\n  const { title, paragraph, button } = props?.Other() ?? {};\n  return (\n    <ExpressiveModal\n      open={open}\n      fullwidth={true}\n      className=\"bx--modal--expressive\">\n      <ModalBody>\n        <StoryContent title={title} paragraph={paragraph} button={button} />\n      </ModalBody>\n    </ExpressiveModal>\n  );\n};\n\nExpanded.story = {\n  parameters: {\n    percy: {\n      name: 'Components|Expressive modal: Expanded',\n    },\n  },\n};\n",locationsMap:{default:{startLoc:{col:23,line:66},endLoc:{col:1,line:76},startBody:{col:23,line:66},endBody:{col:1,line:76}},expanded:{startLoc:{col:24,line:78},endLoc:{col:1,line:91},startBody:{col:24,line:78},endBody:{col:1,line:91}}}}),u.default.parameters),{},{"carbon-theme":{disabled:!0},percy:{name:"Components|Expressive modal: Default"}})};var x=function(){var e,n,t=(null!==(e=null==f?void 0:f.ExpressiveModal())&&void 0!==e?e:{}).open,o=null!==(n=null==f?void 0:f.Other())&&void 0!==n?n:{},r=o.title,a=o.paragraph,s=o.button;return d.a.createElement(l.a,{open:t,className:"bx--modal--expressive"},d.a.createElement(p.a,null,d.a.createElement(h,{title:r,paragraph:a,button:s})))},g=function(){var e,n,t=(null!==(e=null==f?void 0:f.ExpressiveModal())&&void 0!==e?e:{}).open,o=null!==(n=null==f?void 0:f.Other())&&void 0!==n?n:{},r=o.title,a=o.paragraph,s=o.button;return d.a.createElement(l.a,{open:t,fullwidth:!0,className:"bx--modal--expressive"},d.a.createElement(p.a,null,d.a.createElement(h,{title:r,paragraph:a,button:s})))};g.story={parameters:{percy:{name:"Components|Expressive modal: Expanded"}}},x.parameters=b({storySource:{source:'() => {\n  const { open } = props?.ExpressiveModal() ?? {};\n  const { title, paragraph, button } = props?.Other() ?? {};\n  return (\n    <ExpressiveModal open={open} className="bx--modal--expressive">\n      <ModalBody>\n        <StoryContent title={title} paragraph={paragraph} button={button} />\n      </ModalBody>\n    </ExpressiveModal>\n  );\n}'}},x.parameters),g.parameters=b({storySource:{source:'() => {\n  const { open } = props?.ExpressiveModal() ?? {};\n  const { title, paragraph, button } = props?.Other() ?? {};\n  return (\n    <ExpressiveModal\n      open={open}\n      fullwidth={true}\n      className="bx--modal--expressive">\n      <ModalBody>\n        <StoryContent title={title} paragraph={paragraph} button={button} />\n      </ModalBody>\n    </ExpressiveModal>\n  );\n}'}},g.parameters),x.__docgenInfo={description:"",methods:[],displayName:"Default"},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/ExpressiveModal/__stories__/ExpressiveModal.stories.js"]={name:"Default",docgenInfo:x.__docgenInfo,path:"src/components/ExpressiveModal/__stories__/ExpressiveModal.stories.js"}),g.__docgenInfo={description:"",methods:[],displayName:"Expanded"},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/ExpressiveModal/__stories__/ExpressiveModal.stories.js"]={name:"Expanded",docgenInfo:g.__docgenInfo,path:"src/components/ExpressiveModal/__stories__/ExpressiveModal.stories.js"})},"./src/components/ExpressiveModal/index.js":function(e,n,t){"use strict";var o=t("./src/components/ExpressiveModal/ExpressiveModal.js");t.d(n,"a",(function(){return o.a}))}}]);